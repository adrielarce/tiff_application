{"version":3,"sources":["components/AppBar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","core_AppBar_default","position","Toolbar_default","src","alt","width","Typography_default","variant","API_KEY","pageMin","pageMax","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOpen","id","fetchMovieDetails","setState","modalOpen","handleClose","state","numberOfPages","moviesArray","currentMovie","showButton","_this2","tmdbURL","concat","fetch","then","response","json","data","total_pages","start","numOfFetches","fetchMovieList","i","makeFetchRequest","sleepDuration","now","Date","getTime","url","_this3","results","filter","e","popularity","movieID","_this4","console","log","tile","imgID","backdrop_path","split","poster_path","getNumOfPages","_this5","type","onClick","event","imgURL","_this6","runtime","genres","genreArray","values","push","name","components_AppBar","Paper_default","elevation","height","justify","GridList_default","cellHeight","cols","spacing","map","GridListTile_default","key","getImageID","GridListTileBar_default","title","original_title","actionIcon","IconButton_default","color","Info_default","showLoadButton","components_Footer","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","tagline","DialogContent_default","DialogContentText_default","overview","toString","DialogActions_default","Button_default","autoFocus","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f40a1604.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AppBar.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction SimpleAppBar(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar className=\"appbar\">\n          <img src=\"https://www.tiff.net/img/logo-black.png\" alt=\"tiff_logo\" width=\"8%\" className=\"logo\" />\n          <Typography variant=\"h6\">\n            MOVIE SPOTLIGHT 2019\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nSimpleAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleAppBar);","import React from 'react';\nimport './Footer.css';\nimport { withStyles } from '@material-ui/core/styles';\n//import Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n        <img src=\"https://www.themoviedb.org/assets/2/v4/logos/408x161-powered-by-rectangle-blue-10d3d41d2a0af9ebcb85f7fb62ffb6671c15ae8ea9bc82a2c6941f223143409e.png\" alt=\"tmdb_logo\" className=\"logo\" width=\"12%\" />\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Footer);","import React, { Component } from \"react\";\nimport './App.css';\nimport AppBar from './components/AppBar';\nimport Footer from './components/Footer';\n//material-ui components\nimport GridList from '@material-ui/core/GridList';\nimport Paper from '@material-ui/core/Paper';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst API_KEY = \"944796b020baf6db54206d5d01bc1ddc\";\nvar pageMin = 1;\nvar pageMax = 24;\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      numberOfPages: 0,\n      moviesArray: [],\n      currentMovie: 0,\n      showButton: true,\n      modalOpen: false,\n    }\n  }\n  //get number of pages of results\n  getNumOfPages(){\n      var tmdbURL = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=release_date.asc&include_adult=false&include_video=false&primary_release_year=2019`;\n      //get number of page results from tMDB\n      fetch(tmdbURL)\n        .then(response => response.json())\n        .then(data => { \n          this.setState({ \n            numberOfPages: data.total_pages,\n          })\n      });\n\n  }\n  fetchMovieList(start, numOfFetches) {\n      if (pageMin >= this.state.numberOfPages){\n        this.setState({\n          showButton: false,\n        });\n        pageMax = 0;\n        return;\n      }\n      else if (pageMax > this.state.numberOfPages){\n        pageMax = this.state.numberOfPages;\n        this.setState({\n          showButton: false,\n        });\n        this.fetchMovieList(pageMin, pageMax);\n        return;\n      }\n      //fetch api\n      for (var i = start; i <= numOfFetches; i++){\n        var tmdbURL = `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=release_date.asc&include_adult=false&page=${i}&include_video=false&primary_release_year=2019`;\n        /*if (i % 10 === 0){\n          this.sleepFor(250);\n        }*/\n        this.makeFetchRequest(tmdbURL);\n      }\n      pageMin += 24;\n      pageMax += 24;\n\n  }\n  sleepFor( sleepDuration ){\n    var now = new Date().getTime();\n    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } \n  }\n  makeFetchRequest(url){\n    fetch(url)\n    .then(response => response.json())\n    .then(json => {\n    this.setState({\n      moviesArray: this.state.moviesArray.concat(json.results.filter(e => e.popularity >= 10)),\n    })\n  });\n  }\n  //get movie details\n  fetchMovieDetails(movieID){\n    console.log(\"Fetching movie with ID: \"+ movieID);\n    var url = `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=en-US`;\n    fetch(url)\n        .then(response => response.json())\n        .then(data => { \n          this.setState({\n            currentMovie: data,\n          })\n      });\n  }\n  \n  getImageID(tile, imgID){\n    if(tile.backdrop_path != null){\n      imgID = tile.backdrop_path.split(\".\", 1);\n    }\n    else if(tile.poster_path != null && tile.backdrop_path == null){\n      imgID = tile.poster_path.split(\".\", 1);\n    }\n    else if(tile.backdrop_path == null && tile.poster_path == null){ \n      imgID = \"hello\";\n    }\n    return imgID;        \n  }\n  componentDidMount(){\n    console.log(\"Component Mounted!\");\n    this.getNumOfPages();\n    this.fetchMovieDetails(0);\n    //this.fetchMovieList(1, 24);\n  }\n  //functions to handle the Modal component\n  handleOpen = (id) => {\n    this.fetchMovieDetails(id);\n    this.setState({\n      modalOpen: true,\n    });\n  }\n  handleClose = () => {\n    this.setState({ modalOpen: false });\n  }\n  showLoadButton(){\n    if (this.state.showButton){\n      return(\n        <button type=\"button\" className=\"loadButton\" onClick={event => this.fetchMovieList(pageMin, pageMax)}>LOAD MOVIES</button>\n      )\n    }\n  }\n  render() {\n      var imgID;\n      var imgURL;\n      var runtime = (this.state.currentMovie.runtime ? this.state.currentMovie.runtime+\" mins\" : \"N/A\");\n      var genres = (this.state.currentMovie.genres ? this.state.currentMovie.genres : \"N/A\");\n      //genres = Object.values(genres);\n      var genreArray = [];\n      for (var values in genres) {\n        genreArray.push(genres[values].name);\n      }\n      return (\n        \n        <div className=\"App\">\n          <header>\n            <AppBar />\n          </header>\n          <body className=\"body\">\n          <Paper className=\"paper\" elevation={3} height={\"100%\"} justify=\"center\">\n            <GridList cellHeight={180} className=\"gridlist\" cols={4} spacing={10}>\n                {this.state.moviesArray.map(tile => (\n                  <GridListTile key={tile.id} cols={1} className=\"tiles\">\n                    {imgID = this.getImageID(tile, imgID)}\n                    {imgURL = \"https://image.tmdb.org/t/p/original\" + imgID + \".svg\" }\n                    <img src={imgURL} alt={tile.id + \"_img\"} className=\"movieIMG\"/>\n                    <GridListTileBar\n                      className=\"tilebar\"\n                      title={tile.original_title}\n                      actionIcon={\n                        <IconButton className=\"icon\" color='secondary' onClick={event => this.handleOpen(tile.id)}>\n                          <InfoIcon />\n                        </IconButton>\n                      }\n                    />\n                  </GridListTile>\n\n                ))}\n            </GridList>\n            {this.showLoadButton()}\n          </Paper>\n          </body>\n          <Footer />\n            <Dialog\n            className=\"dialogcontainer\"\n            open={this.state.modalOpen}\n            onClose={this.handleClose}\n            aria-labelledby=\"responsive-dialog-title\"\n            >\n              <DialogTitle className=\"dialogtitle\">\n                {this.state.currentMovie.original_title}<br/>\n                <span className=\"tagline\">{this.state.currentMovie.tagline || \"\"}</span>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText className=\"dialogtext\" >\n                  {this.state.currentMovie.overview} <br/><br/>\n                  Genre: {genreArray.toString()} <br/>\n                  Runtime: { runtime }\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n                  Close\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}